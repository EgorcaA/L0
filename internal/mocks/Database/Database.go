// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocksdb

import (
	context "context"

	order_struct "github.com/EgorcaA/create_db/internal/order_struct"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// GetAllOrders provides a mock function with given fields:
func (_m *Database) GetAllOrders() ([]order_struct.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []order_struct.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]order_struct.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []order_struct.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order_struct.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: ctx, order
func (_m *Database) InsertOrder(ctx context.Context, order order_struct.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, order_struct.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
