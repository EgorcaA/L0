// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocksredis

import (
	context "context"

	order_struct "github.com/EgorcaA/create_db/internal/order_struct"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/EgorcaA/create_db/internal/storage"
)

// CacheClient is an autogenerated mock type for the CacheClient type
type CacheClient struct {
	mock.Mock
}

// GetOrder provides a mock function with given fields: ctx, orderUID
func (_m *CacheClient) GetOrder(ctx context.Context, orderUID string) (order_struct.Order, error) {
	ret := _m.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 order_struct.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (order_struct.Order, error)); ok {
		return rf(ctx, orderUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) order_struct.Order); ok {
		r0 = rf(ctx, orderUID)
	} else {
		r0 = ret.Get(0).(order_struct.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreCacheFromDB provides a mock function with given fields: ctx, db
func (_m *CacheClient) RestoreCacheFromDB(ctx context.Context, db *storage.PostgresDB) {
	_m.Called(ctx, db)
}

// SaveOrder provides a mock function with given fields: ctx, order
func (_m *CacheClient) SaveOrder(ctx context.Context, order order_struct.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, order_struct.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCacheClient creates a new instance of CacheClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheClient {
	mock := &CacheClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
